
from pwn import *

p = remote("10.12.0.1", 1234)
        
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)
p.recv("""    '##::::::::::'###::::'########:'########:'##:::::::'##:::::::'########:     ##:::::::::'## ##:::..... ##:: ##.....:: ##::::::: ##::::::: ##.....::     ##::::::::'##:. ##:::::: ##::: ##::::::: ##::::::: ##::::::: ##:::::::     ##:::::::'##:::. ##:::: ##:::: ######::: ##::::::: ##::::::: ######:::     ##::::::: #########::: ##::::: ##...:::: ##::::::: ##::::::: ##...::::     ##::::::: ##.... ##:: ##:::::: ##::::::: ##::::::: ##::::::: ##:::::::     ########: ##:::: ##: ########: ########: ########: ########: ########:    ........::..:::::..::........::........::........::........::........::    the future is here - 32bit. but it's too hard to write asm anymore, ya?    who even wants to write code for some rusty ol' Archimedes....... not I    ................ [ WHAT IF THERE WAS AN EASIER WAY ? ] ................    1. run example .LEG    2. try out your own .LEG!    3. exit    #> """)

p.close()
